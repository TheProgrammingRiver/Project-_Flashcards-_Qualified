{"ast":null,"code":"var _jsxFileName = \"/Users/river/Desktop/Project-_Flashcards-_Qualified-main/src/Layout/decks/new/CreateDeck.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { createDeck } from \"../../../utils/api\";\nimport NavigationBar from \"../../NavigationBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateDeck() {\n  _s();\n  const [deckName, setDeckName] = useState(\"\");\n  const [deckDescription, setDeckDescription] = useState(\"\");\n  const history = useHistory();\n  const [abortControllers, setAbortControllers] = useState([]);\n  const _abortPreviousCall = () => {\n    if (abortControllers.length) {\n      const lastIndex = abortControllers.length - 1;\n      const lastAbortController = abortControllers[lastIndex];\n      lastAbortController.abort();\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n    _abortPreviousCall();\n    const newAbortController = new AbortController();\n    setAbortControllers([...abortControllers, newAbortController]);\n    const deck = {\n      name: deckName,\n      description: deckDescription\n    };\n    /*Used setTimer just to test the Abort functionality and to see if it will be aborted\n      if the user make another submit attemp */\n    // setTimeout(() => {\n    //   createDeck(deck, newAbortController.signal);\n    // }, 2000);\n    createDeck(deck, newAbortController.signal).then(_ref => {\n      let {\n        id\n      } = _ref;\n      return history.push(\"/decks/\" + id);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NavigationBar, {\n      navItems: [\"Creat Deck\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Create Deck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"deckName\",\n          children: \"Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          id: \"deckName\",\n          \"aria-describedby\": \"newDeck\",\n          placeholder: \"Deck Name\",\n          required: true,\n          value: deckName,\n          onChange: _ref2 => {\n            let {\n              target: {\n                value\n              }\n            } = _ref2;\n            setDeckName(value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          id: \"newDeck\",\n          className: \"form-text text-muted\",\n          children: \"This field is requuired\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"description\",\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          id: \"description\",\n          placeholder: \"Brief description of the deck\",\n          rows: \"3\",\n          required: true,\n          value: deckDescription,\n          onChange: _ref3 => {\n            let {\n              target: {\n                value\n              }\n            } = _ref3;\n            setDeckDescription(value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"reset\",\n        className: \"btn btn-dark mr-2\",\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(CreateDeck, \"tSuCBEX3w0bglM3ADfODbr4Dfp0=\", false, function () {\n  return [useHistory];\n});\n_c = CreateDeck;\nexport default CreateDeck;\nvar _c;\n$RefreshReg$(_c, \"CreateDeck\");","map":{"version":3,"names":["React","useState","useHistory","createDeck","NavigationBar","CreateDeck","deckName","setDeckName","deckDescription","setDeckDescription","history","abortControllers","setAbortControllers","_abortPreviousCall","length","lastIndex","lastAbortController","abort","handleSubmit","event","preventDefault","newAbortController","AbortController","deck","name","description","signal","then","id","push","target","value"],"sources":["/Users/river/Desktop/Project-_Flashcards-_Qualified-main/src/Layout/decks/new/CreateDeck.js"],"sourcesContent":["import  React, {useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { createDeck } from \"../../../utils/api\";\nimport NavigationBar from \"../../NavigationBar\";\n\nfunction CreateDeck() {\n  const [deckName, setDeckName] = useState(\"\");\n  const [deckDescription, setDeckDescription] = useState(\"\");\n  const history = useHistory();\n\n  const [abortControllers, setAbortControllers] = useState([]);\n  const _abortPreviousCall = () => {\n    if (abortControllers.length) {\n      const lastIndex = abortControllers.length - 1;\n      const lastAbortController = abortControllers[lastIndex];\n      lastAbortController.abort();\n    }\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    _abortPreviousCall();\n    const newAbortController = new AbortController();\n    setAbortControllers([...abortControllers, newAbortController]);\n    const deck = {\n      name: deckName,\n      description: deckDescription,\n    };\n    /*Used setTimer just to test the Abort functionality and to see if it will be aborted\n      if the user make another submit attemp */\n    // setTimeout(() => {\n    //   createDeck(deck, newAbortController.signal);\n    // }, 2000);\n    createDeck(deck, newAbortController.signal).then(({id})=>history.push(\"/decks/\"+id));\n  };\n  return (\n    <div>\n      <NavigationBar navItems={[\"Creat Deck\"]} />\n      <h2>Create Deck</h2>\n\n      <form onSubmit={handleSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"deckName\">Name</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"deckName\"\n            aria-describedby=\"newDeck\"\n            placeholder=\"Deck Name\"\n            required\n            value={deckName}\n            onChange={({ target: { value } }) => {\n              setDeckName(value);\n            }}\n          />\n          <small id=\"newDeck\" className=\"form-text text-muted\">\n            This field is requuired\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"description\">Description</label>\n          <textarea\n            className=\"form-control\"\n            id=\"description\"\n            placeholder=\"Brief description of the deck\"\n            rows=\"3\"\n            required\n            value={deckDescription}\n            onChange={({ target: { value } }) => {\n              setDeckDescription(value);\n            }}\n          />\n        </div>\n        <button type=\"reset\" className=\"btn btn-dark mr-2\">\n          Cancel\n        </button>\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\nexport default CreateDeck;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}